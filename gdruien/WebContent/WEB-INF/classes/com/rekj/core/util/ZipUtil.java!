package com.rekj.core.util;

import java.io.File;
import java.util.Iterator;
import java.util.List;

import net.lingala.zip4j.core.ZipFile;
import net.lingala.zip4j.exception.ZipException;
import net.lingala.zip4j.model.FileHeader;
import net.lingala.zip4j.model.ZipParameters;

import org.springframework.web.multipart.MultipartFile;

public class ZipUtil {
	public static void zip(String path) {
		zip(path, true);
	}

	public static void zip(String path, Boolean isDelete) {
		ZipFile zipFile = null;
		try {
			ZipParameters parameters = new ZipParameters();
			parameters.setCompressionMethod(8);
			parameters.setCompressionLevel(5);
			File file = new File(path);
			if (file.isDirectory()) {
				zipFile = new ZipFile(new File(path + ".zip"));
				// zipFile.setFileNameCharset("utf-8");
				zipFile.setFileNameCharset("gbk");
				// path = new String(path.getBytes("UTF-8"));
				zipFile.addFolder(path, parameters);
			} else {
				zipFile = new ZipFile(new File(path.split(".")[0] + ".zip"));
				// zipFile.setFileNameCharset("utf-8");
				zipFile.setFileNameCharset("gbk");
				zipFile.addFile(file, parameters);
			}

			if (isDelete)
				FileUtil.deleteDir(file);
		} catch (ZipException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void zipSetPass(String path, Boolean isDelete, String password) {
		ZipFile zipFile = null;
		try {
			ZipParameters parameters = new ZipParameters();
			parameters.setCompressionMethod(8);
			parameters.setCompressionLevel(5);

			parameters.setEncryptFiles(true);
			parameters.setEncryptionMethod(0);
			parameters.setPassword(password);
			File file = new File(path);
			if (file.isDirectory()) {
				zipFile = new ZipFile(new File(path + ".zip"));
				zipFile.setFileNameCharset("utf-8");
				zipFile.addFolder(path, parameters);
			} else {
				zipFile = new ZipFile(new File(path.split(".")[0] + ".zip"));
				zipFile.setFileNameCharset("utf-8");
				zipFile.addFile(file, parameters);
			}
			if (isDelete)
				FileUtil.deleteDir(new File(path));
		} catch (ZipException e) {
			e.printStackTrace();
		}
	}

	public static void unZip(String filePath, String toPath, String password) {
		try {
			unZipFile(new ZipFile(filePath), toPath, password);
		} catch (ZipException e) {
			e.printStackTrace();
		}
	}

	public static String unZipFile(MultipartFile multipartFile, String toPath)
			throws Exception {
		String originalFilename = multipartFile.getOriginalFilename();
		String destPath = toPath + originalFilename;

		createFilePath(destPath, originalFilename);
		File file = new File(destPath);
		if (file.exists())
			file.delete();
		multipartFile.transferTo(file);
		ZipFile zipFile = new ZipFile(file);
		zipFile.setFileNameCharset("GBK");
		if (zipFile.isEncrypted())
			zipFile.setPassword("");
		if (!zipFile.isValidZipFile())
			throw new ZipException("压缩文件不合法,可能被损坏.");
		String fileDir = "";
		zipFile.extractAll(toPath);

		List<FileHeader> fileHeaderList = zipFile.getFileHeaders();
		for (FileHeader fileHeader : fileHeaderList) {
			String dirName = fileHeader.getFileName();
			if (fileHeader.isDirectory()) {
				if (dirName.endsWith("\\"))
					fileDir = dirName.substring(0, dirName.lastIndexOf("\\"));
				else if (dirName.endsWith("/"))
					fileDir = dirName.substring(0, dirName.lastIndexOf("/"));
				else {
					fileDir = dirName.substring(0,
							dirName.lastIndexOf(File.separator));
				}
			}
		}
		FileUtil.deleteDir(file);

		return fileDir;
	}

	public static void unZipFile(MultipartFile multipartFile, String toPath,
			String password) {
		String originalFilename = multipartFile.getOriginalFilename();
		String destPath = toPath + originalFilename;
		try {
			createFilePath(destPath, originalFilename);
			File file = new File(destPath);
			if (file.exists())
				file.delete();
			multipartFile.transferTo(file);
			unZipFile(new ZipFile(file), toPath, password);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void unZipFile(ZipFile zipFile, String toPath, String password) {
		try {
			if (zipFile.isEncrypted())
				zipFile.setPassword(password);
			List fileHeaderList = zipFile.getFileHeaders();
			for (Iterator i$ = fileHeaderList.iterator(); i$.hasNext();) {
				Object o = i$.next();
				FileHeader fileHeader = (FileHeader) o;
				zipFile.extractFile(fileHeader, toPath);
			}
		} catch (ZipException e) {
			e.printStackTrace();
		}
	}

	public static String createFilePath(String tempPath, String fileName) {
		File file = new File(tempPath);

		if (!file.exists())
			file.mkdirs();
		return file.getPath() + File.separator + fileName;
	}
}
