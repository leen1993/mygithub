package com.rekj.jj.controller;

import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.EmbeddedValueResolverAware;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringValueResolver;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.rekj.core.util.AppConfigUtil;
import com.rekj.core.util.DESUtil;
import com.rekj.core.web.controller.BaseController;
import com.rekj.core.web.query.QueryFilter;
import com.rekj.jj.pojo.Student;
import com.rekj.jj.service.StudentService;

/**
 * 测试控制类
 * 
 * @author leen_pc
 *
 */
@Controller
@RequestMapping("/test")
public class TestController extends BaseController implements ApplicationContextAware, EmbeddedValueResolverAware{
    
	@Autowired
	private StudentService studentService;
	
	private StringValueResolver resolver;
	
	/**
	 * 获取
	 * 
	 * @return
	 * @throws
	 */
	@RequestMapping("/getListData")
	@ResponseBody
	public Object getList(String stuId, HttpServletRequest request) {
		try{
		   String url = AppConfigUtil.get("db.his.url");
		   String value = AppConfigUtil.get("salts.test");
		   String encrypt = DESUtil.encrypt(url, value);
		   
		   QueryFilter filter = new QueryFilter(request);
		   List<Student> student = studentService.getAll(filter);
		   List list = studentService.getList("getStus", new HashMap());
		   Object obj = this.formatDatagrid(student, filter);
		   return obj;
		} catch(Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	@RequestMapping("/getList")
	public ModelAndView getList() {
		try{
			return this.getView();
		} catch(Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public void setApplicationContext(ApplicationContext context) throws BeansException {
		String[] beanNames = context.getBeanDefinitionNames();
		System.out.println("--------------------start-------");
		for (int i = 0; i < beanNames.length; i++) {
			System.out.println(beanNames[i]);
		}
		System.out.println("--------------------end-------");
	}

	@Override
	public void setEmbeddedValueResolver(StringValueResolver resolver) {
        this.resolver = resolver;
	}
}
