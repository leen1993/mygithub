package com.rekj.core.util;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;

import javax.imageio.ImageIO;
import javax.imageio.ImageReadParam;
import javax.imageio.ImageReader;
import javax.imageio.stream.ImageInputStream;
import javax.swing.ImageIcon;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.sun.image.codec.jpeg.JPEGCodec;
import com.sun.image.codec.jpeg.JPEGEncodeParam;
import com.sun.image.codec.jpeg.JPEGImageEncoder;

public class ImageUtil {
	public static Log log = LogFactory.getLog(ImageUtil.class);

	public static Image loadImage(byte[] imagedata) {
		Image image = Toolkit.getDefaultToolkit().createImage(imagedata);
		return image;
	}

	public static Image loadImage(String filename) {
		return Toolkit.getDefaultToolkit().getImage(filename);
	}

	public static BufferedImage loadImage(File file) {
		BufferedImage bufferedImage = null;
		try {
			bufferedImage = ImageIO.read(file);
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
		return bufferedImage;
	}

	public static ImageReader getImageReader(InputStream is, String formatName)
			throws IOException {
		Iterator readers = ImageIO.getImageReadersByFormatName(formatName);

		ImageReader reader = (ImageReader) readers.next();
		ImageInputStream iis = null;
		try {
			iis = ImageIO.createImageInputStream(is);
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
		reader.setInput(iis, true);
		return reader;
	}

	public static ImageReader getImageReader(File file) {
		String formatName = getFileSuffix(file);
		Iterator readers = ImageIO.getImageReadersByFormatName(formatName);

		ImageReader reader = (ImageReader) readers.next();
		ImageInputStream iis = null;
		try {
			iis = ImageIO.createImageInputStream(file);
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
		reader.setInput(iis, true);
		return reader;
	}

	private static String getFileSuffix(File file) {
		String fileName = file.getName();
		int index = fileName.indexOf(".");
		String formatName = fileName.substring(index + 1);
		return formatName;
	}

	public static void cutImage(int x, int y, int width, int height, File file,
			File output) {
		String formatName = getFileSuffix(file);
		Iterator readers = ImageIO.getImageReadersByFormatName(formatName);

		ImageReader reader = (ImageReader) readers.next();
		ImageInputStream iis = null;
		try {
			iis = ImageIO.createImageInputStream(file);
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
		reader.setInput(iis, true);
		ImageReadParam param = reader.getDefaultReadParam();
		Rectangle sourceRegion = new Rectangle(x, y, width, height);
		param.setSourceRegion(sourceRegion);
		try {
			BufferedImage bufferedImage = reader.read(0, param);
			ImageIO.write(bufferedImage, getFileSuffix(file), output);
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}

	public static InputStream cutImage(int x, int y, int width, int height,
			ImageReader reader) {
		ImageReadParam param = reader.getDefaultReadParam();
		Rectangle sourceRegion = new Rectangle(x, y, width, height);
		param.setSourceRegion(sourceRegion);
		try {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			BufferedImage bufferedImage = reader.read(0, param);
			ImageIO.write(bufferedImage, "png", baos);
			return new ByteArrayInputStream(baos.toByteArray());
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}

	public static ImageIcon getImageIcon(File file) {
		String filename = file.getAbsolutePath();
		return new ImageIcon(filename);
	}

	// public static void createWaterMark(File srcFile, File waterFile,
	// File compositeFile) throws IOException {
	// Image theImg = new ImageIcon(srcFile.getAbsolutePath()).getImage();
	// Image waterImg = new ImageIcon(waterFile.getAbsolutePath()).getImage();
	// int width = theImg.getWidth(null);
	// int height = theImg.getHeight(null);
	// int w = waterImg.getWidth(null);
	// int h = waterImg.getHeight(null);
	//
	// BufferedImage bimage = new BufferedImage(width, height, 1);
	// Graphics2D g = bimage.createGraphics();
	// g.setColor(Color.WHITE);
	// g.fillRect(0, 0, width, height);
	// g.setColor(Color.BLACK);
	//
	// g.drawImage(theImg, 0, 0, null);
	// g.setComposite(AlphaComposite.getInstance(3, 0.4F));
	// width -= w;
	// height -= h;
	// g.drawImage(waterImg, width, height, null);
	// g.dispose();
	// FileOutputStream fos = null;
	// ImageOutputStream ios = null;
	// JPEGImageWriter imageWriter = null;
	// try {
	// fos = new FileOutputStream(compositeFile);
	// imageWriter = (JPEGImageWriter) ImageIO.getImageWritersBySuffix(
	// "jpeg").next();
	//
	// ios = ImageIO.createImageOutputStream(fos);
	// imageWriter.setOutput(ios);
	//
	// IIOMetadata imageMetaData = imageWriter.getDefaultImageMetadata(
	// new ImageTypeSpecifier(bimage), null);
	//
	// JPEGImageWriteParam jpegParams = (JPEGImageWriteParam) imageWriter
	// .getDefaultWriteParam();
	// jpegParams.setCompressionMode(2);
	// jpegParams.setCompressionQuality(1.0F);
	//
	// imageWriter.write(imageMetaData, new IIOImage(bimage, null, null),
	// null);
	// } catch (Exception e) {
	// e.printStackTrace();
	// throw new RuntimeException(e);
	// } finally {
	// ios.close();
	// fos.close();
	// imageWriter.dispose();
	// }
	// }

	public static InputStream createRectangle(InputStream inputStream, int x,
			int y, int w, int h) {
		BufferedImage bimage = null;
		try {
			bimage = ImageIO.read(inputStream);
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
		Graphics2D g = bimage.createGraphics();
		g.setComposite(AlphaComposite.getInstance(3, 0.4F));
		g.setColor(Color.RED);

		g.drawRect(x, y, w, h);
		g.dispose();
		try {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			ImageIO.write(bimage, "PNG", baos);
			return new ByteArrayInputStream(baos.toByteArray());
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}

	// public static void testCompositeFile() throws IOException {
	// File srcFile = new File("e:\\origin.jpg");
	// File waterFile = new File("e:\\logo.jpg");
	// File compositeFile = new File("e:\\temp.jpg");
	// createWaterMark(srcFile, waterFile, compositeFile);
	// }

	public static void tsetReaderImageIconTime() {
		String dir = "F:\\picture\\";
		long start = System.currentTimeMillis();
		File[] files = new File(dir).listFiles();
		for (File item : files) {
			ImageIcon imageIcon = getImageIcon(item);
			int width = imageIcon.getIconWidth();
			int height = imageIcon.getIconHeight();
			log.info("图片的宽度：" + width);
			log.info("图片的高度：" + height);
		}
		long end = System.currentTimeMillis();
		log.info("所花时间：" + (end - start) / 1000L + "秒");
	}

	public static void testCutImage() throws IOException {
		File file = new File("e:\\vehicle_examine_info.png");
		File output = new File("e:\\vehicle_examine_info.png");
		ImageReader reader = getImageReader(file);
		int imageIndex = 0;
		int width = reader.getWidth(imageIndex) / 2;
		int height = reader.getHeight(imageIndex);
		cutImage(0, 0, width, height, file, output);
	}

	public static void testReaderImageTime() throws IOException {
		String dir = "F:\\picture\\";
		long start = System.currentTimeMillis();
		File[] files = new File(dir).listFiles();
		for (File item : files) {
			ImageReader reader = getImageReader(item);
			int imageIndex = 0;
			int width = reader.getWidth(imageIndex);
			int height = reader.getHeight(imageIndex);
			log.info("图片的宽度：" + width);
			log.info("图片的高度：" + height);
		}
		long end = System.currentTimeMillis();
		log.info("所花时间：" + (end - start) / 1000L + "秒");
	}

	public static String doCompressByByte(byte[] b, String newFile, int width,
			int height, float quality, boolean percentage) {
		if ((b.length > 0) && (width > 0)) {
			InputStream in_nocode = new ByteArrayInputStream(b);
			String newImage = null;
			try {
				Image srcFile = ImageIO.read(in_nocode);

				int new_w = srcFile.getWidth(null);
				int new_h = srcFile.getHeight(null);

				if (percentage) {
					double rate = srcFile.getWidth(null) / width + 0.1D;

					new_w = (int) (srcFile.getWidth(null) / rate);
					new_h = (int) (srcFile.getHeight(null) / rate);
				} else {
					if (height <= 0) {
						return null;
					}

					int num = new_w / 40;
					if (width > 0) {
						new_w = width;
					} else {
						new_w /= 40;
						if (new_w <= 0) {
							new_w = 40;
						}
					}
					if (new_h > 0) {
						new_h = height;
					} else {
						new_h = height / num * 30;
						if (new_h <= 0) {
							new_h = 30;
						}
					}
				}

				BufferedImage tag = new BufferedImage(new_w, new_h, 1);
				tag.getGraphics().drawImage(srcFile, 0, 0, new_w, new_h, null);

				newImage = newFile;

				FileOutputStream out = new FileOutputStream(newImage);

				JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);
				JPEGEncodeParam jep = JPEGCodec.getDefaultJPEGEncodeParam(tag);

				jep.setQuality(quality, true);
				encoder.encode(tag, jep);

				out.close();
				srcFile.flush();
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return newImage;
		}
		return null;
	}

	public static String doCompressByPath(String oldFile, String newFile,
			int width, int height, float quality, boolean percentage) {
		if ((oldFile != null) && (width > 0) && (height > 0)) {
			String newImage = null;
			try {
				File file = new File(oldFile);

				if (!file.exists()) {
					return null;
				}

				Image srcFile = ImageIO.read(file);
				int new_w = width;
				int new_h = height;
				if (percentage) {
					double rate1 = srcFile.getWidth(null) / width + 0.1D;

					double rate2 = srcFile.getHeight(null) / height + 0.1D;

					double rate = rate1 > rate2 ? rate1 : rate2;
					new_w = (int) (srcFile.getWidth(null) / rate);
					new_h = (int) (srcFile.getHeight(null) / rate);
				}

				BufferedImage tag = new BufferedImage(new_w, new_h, 1);
				tag.getGraphics().drawImage(srcFile, 0, 0, new_w, new_h, null);

				newImage = newFile;

				FileOutputStream out = new FileOutputStream(newImage);

				JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);
				JPEGEncodeParam jep = JPEGCodec.getDefaultJPEGEncodeParam(tag);

				jep.setQuality(quality, true);
				encoder.encode(tag, jep);

				out.close();
				srcFile.flush();
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return newImage;
		}
		return null;
	}

	public static File getFileFromBytes(byte[] b, String outputFile) {
		BufferedOutputStream stream = null;
		File file = null;
		try {
			file = new File(outputFile);
			FileOutputStream fstream = new FileOutputStream(file);
			stream = new BufferedOutputStream(fstream);
			stream.write(b);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (stream != null) {
				try {
					stream.close();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
		}
		return file;
	}
}
